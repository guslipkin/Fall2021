
mynewdb=# create table countries( country_code char(2) Primary Key, country_name text unique);
CREATE TABLE
mynewdb=# insert into countries (country_code,country_name)
mynewdb-# Values ('us', 'United States'), ('mx','Mexico'), ('au','Austrailia'), ('gb','United Kingdom'),
mynewdb-# ('de','Germany'), ('ll','Loompaland');
INSERT 0 6
mynewdb=# insert into countries values ('uk','United Kingdom');
ERROR:  duplicate key value violates unique constraint "countries_country_name_key"
DETAIL:  Key (country_name)=(United Kingdom) already exists.
mynewdb=# select * From Countries;
 country_code |  country_name
--------------+----------------
 us           | United States
 mx           | Mexico
 au           | Austrailia
 gb           | United Kingdom
 de           | Germany
 ll           | Loompaland
(6 rows)


mynewdb=# Delete From Countries where country_code='ll';
DELETE 1
mynewdb=# select * From Countries;
 country_code |  country_name
--------------+----------------
 us           | United States
 mx           | Mexico
 au           | Austrailia
 gb           | United Kingdom
 de           | Germany
(5 rows)

mynewdb=# create table cities ( name text not null, postal_code varchar(9) check (postal_code <> ''),country_code char(2) references countries, primary key (country_code,postal_code));
CREATE TABLE
mynewdb=# insert into cities values ('Toronto','M4C1B5','ca');
ERROR:  insert or update on table "cities" violates foreign key constraint "cities_country_code_fkey"
DETAIL:  Key (country_code)=(ca) is not present in table "countries".
mynewdb=# insert into cities values ('Portland','87200','us');
INSERT 0 1
mynewdb=# update cities set postal_code='97206' where name='Portland';
UPDATE 1
mynewdb=# select cities.*, country_name From cities inner join countries on cities.country_code=countries.country.code;
ERROR:  missing FROM-clause entry for table "country"
LINE 1: ...ities inner join countries on cities.country_code=countries....
                                                             ^
mynewdb=# select cities.*, country_name From cities inner join countries on cities.country_code=countries.country_code;
   name   | postal_code | country_code | country_name
----------+-------------+--------------+---------------
 Portland | 97206       | us           | United States
(1 row)


mynewdb=# create table venues (
mynewdb(# venue_id serial primary key,
mynewdb(# name varchar(255),
mynewdb(# street_address text,
mynewdb(# type char(7) check ( type in ('public','private') ) Default 'Public',
mynewdb(# postal_code varchar(9),
mynewdb(# country_code char(2),
mynewdb(# Foreign Key (country_code, postal_code)
mynewdb(# references cities (country_code, postal_code) match full );
ERROR:  type "key" does not exist
LINE 8: Foriegn Key (country_code, postal_code)
                ^
mynewdb=# create table venues (venue_id serial primary key,name varchar(255),street_address text,type char(7) check ( type in ('public','private') ) Default 'Public',postal_code varchar(9),country_code char(2),Foreign Key (country_code, postal_code)references cities (country_code, postal_code) match full );
CREATE TABLE
mynewdb=# insert into venues (name, postal_code, country_code)
mynewdb-# values ('Crystal Ballroom', '97206','us');
ERROR:  new row for relation "venues" violates check constraint "venues_type_check"
DETAIL:  Failing row contains (1, Crystal Ballroom, null, Public , 97206, us).
mynewdb=# ALTER TABLE public.venues ALTER COLUMN type SET DEFAULT 'public'::pg_catalog.bpchar;
ALTER TABLE
mynewdb=# insert into venues (name, postal_code, country_code)
mynewdb-# values ('Crystal Ballroom', '97206','us');
INSERT 0 1
mynewdb=# select v.venue_id, v.name, c.name From venues v inner join cities c
mynewdb-# on v.postal_code=c.postal_code and v.country_code=c.country_code;
 venue_id |       name       |   name
----------+------------------+----------
        2 | Crystal Ballroom | Portland
(1 row)


mynewdb=# insert into venues (name, postal_code, country_code) 
values ('Voodoo Doughnut','97206','us') returning venue_id;

mynewdb=# create table events (
mynewdb(# event_id serial primary key,
mynewdb(# title varchar(255),
mynewdb(# starts timestamp,
mynewdb(# ends timestamp,
mynewdb(# Foreign Key (venue_id)
mynewdb(# references venues (venue_id) match full );

create table events (event_id serial primary key, title varchar(255), starts timestamp, ends timestamp, venue_id int, Foreign Key (venue_id) references venues (venue_id) match full );

mynewdb=# create table events (event_id serial primary key, title varchar(255), starts timestamp, ends timestamp, venue_id int, Foreign Key (venue_id) references venues (venue_id) match full );
CREATE TABLE
insert into events (title, starts, ends, venue_id)
mynewdb-# values ('Fight Club', '2018-02-15 17:30', '2018-02-15 19:30', 2)
mynewdb-# values ('April Fools Day', '2018-04-01 00:00', '2018-04-01 11:59');
ERROR:  INSERT has more target columns than expressions
LINE 1: insert into events (title, starts, ends, venue_id)
                                                 ^
mynewdb=# insert into events (title, starts, ends)
mynewdb-# values ('April Fools Day', '2018-04-01 00:00', '2018-04-01 11:59');
INSERT 0 1
mynewdb=# insert into events (title, starts, ends)
mynewdb-# values ('Christmas Day', '2018-12-25 00:00', '2018-12-25 11:59');
INSERT 0 1
mynewdb=# select e.title, v.name FROM events e join venues v on e.venue_id=v.venue_id;
   title    |       name
------------+------------------
 Fight Club | Crystal Ballroom
(1 row)


mynewdb=# select * from venues
mynewdb-# ;
 venue_id |       name       | street_address |  type   | postal_code | country_code
----------+------------------+----------------+---------+-------------+--------------
        2 | Crystal Ballroom |                | public  | 97206       | us
        3 | Voodoo Doughnut  |                | public  | 97206       | us
(2 rows)


mynewdb=# select e.title, v.name from events e left join venues v on e.venue_id=v.venue_id;
      title      |       name
-----------------+------------------
 Fight Club      | Crystal Ballroom
 April Fools Day |
 Christmas Day   |
(3 rows)


mynewdb=# create index events_title on events using hash (title);
CREATE INDEX
mynewdb=# select * from events where title='Christmas Day';
 event_id |     title     |       starts        |        ends         | venue_id
----------+---------------+---------------------+---------------------+----------
        3 | Christmas Day | 2018-12-25 00:00:00 | 2018-12-25 11:59:00 |
(1 row)


mynewdb=# create index events_starts on events using btree (starts);
CREATE INDEX
mynewdb=# \di
                         List of relations
 Schema |            Name            | Type  |  Owner   |   Table
--------+----------------------------+-------+----------+-----------
 public | cities_pkey                | index | postgres | cities
 public | countries_country_name_key | index | postgres | countries
 public | countries_pkey             | index | postgres | countries
 public | events_pkey                | index | postgres | events
 public | events_starts              | index | postgres | events
 public | events_title               | index | postgres | events
 public | venues_pkey                | index | postgres | venues
(7 rows)


mynewdb=# insert into events (title, starts, ends, venue_id)
mynewdb-# values ('Moby', '2018-02-06 21:00', '2018-02-06 23:00, (select venue_id from venues where name= 'Crystal Ballroom'));
mynewdb'# select * from events
mynewdb'# '
mynewdb(# )
mynewdb-# ;
ERROR:  syntax error at or near "Crystal"
LINE 2: ... 23:00, (select venue_id from venues where name= 'Crystal Ba...
                                                             ^
mynewdb=# insert into events (title, starts, ends, venue_id)
mynewdb-# values ('Moby', '2018-02-06 21:00', '2018-02-06 23:00', (select venue_id from venues where name= 'Crystal Ballroom'));
INSERT 0 1
mynewdb=# select * from events
mynewdb-# ;
 event_id |      title      |       starts        |        ends         | venue_id
----------+-----------------+---------------------+---------------------+----------
        1 | Fight Club      | 2018-02-15 17:30:00 | 2018-02-15 19:30:00 |        2
        2 | April Fools Day | 2018-04-01 00:00:00 | 2018-04-01 11:59:00 |
        3 | Christmas Day   | 2018-12-25 00:00:00 | 2018-12-25 11:59:00 |
        4 | Moby            | 2018-02-06 21:00:00 | 2018-02-06 23:00:00 |        2
(4 rows)


mynewdb=# select count(title) from events;
 count
-------
     4
(1 row)


mynewdb=# select count(title) from events where title like '%Day%';
 count
-------
     2
(1 row)


mynewdb=# select min(starts), max(ends) from events inner join venues on events.venue_id=venues.venue_id
mynewdb-# where venues.name = 'Crystal Ballroom';
         min         |         max
---------------------+---------------------
 2018-02-06 21:00:00 | 2018-02-15 19:30:00
(1 row)


mynewdb=# select venue_id, count(*) from events group by venue_id;
 venue_id | count
----------+-------
          |     2
        2 |     2
(2 rows)

insert into events (title, starts, ends, venue_id) values ('Wedding', '2018-02-26 21:00', '2018-02-26 23:00', (select venue_id from venues where name= 'Voodoo Doughnut'));

insert into venues (name, postal_code, country_code) values ('My Place','97206','us') returning venue_id;

insert into events (title, starts, ends, venue_id) values ('Dinner with Mom', '2018-02-26 18:00', '2018-02-26 20:30', (select venue_id from venues where name= 'My Place'));

select venue_id, count(*) from events group by venue_id having count(*)>=2 and venue_id is not null;

mynewdb=# select venue_id from events group by venue_id having count(*)>=2 and venue_id is not null;
 venue_id
----------
        2
(1 row)


mynewdb=# select distinct venue_id from events;
 venue_id
----------

        4
        2
(3 rows)


mynewdb=# select venue_id, count(*) over (partition by venue_id) from events order by venue_id;
 venue_id | count
----------+-------
        2 |     2
        2 |     2
        4 |     1
          |     3
          |     3
          |     3
(6 rows)

Run Create add_event function
SELECT add_event('House Party','2018-05-03 23:00','2018-05-04 02:00','Run''s House','97206','us');

SELECT film_id, title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost, rating, last_update, special_features, fulltext
	FROM public.film
	where title ILIKE 'alabama%';

SELECT film_id, title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost, rating, last_update, special_features, fulltext
	FROM public.film
	--where title ILIKE 'alabama%';
	where title !~* '^ali.*';


mynewdb=# create table logs ( event_id integer, old_title varchar(255), old_starts timestamp, old_ends timestamp, logged_at timestamp DEFAULT current_timestamp);
CREATE TABLE
mynewdb=# select extract (year from starts) as year, extract (month from starts) as month, count(*) from events group by year, month order by year, month;
 year | month | count
------+-------+-------
 2018 |     2 |     4
 2018 |     4 |     1
 2018 |    12 |     1
(3 rows)


mynewdb=# create temporary table month_count(month int);
CREATE TABLE
mynewdb=# insert into month_count values (1), (2), (3), (4), (5), (6), (7), (8), (9), (10), (11), (12);
INSERT 0 12

mynewdb=# select * from crosstab('select extract (year from starts) as year, extract (month from starts) as month, count(*) from events group by year, month order by year, month','select * from month_count') AS (year int, jan int, feb int, mar int, apr int, may int, jun int, jul int, aug int, sep int, oct int, nov int, dec int) ORDER BY YEAR;
ERROR:  function crosstab(unknown, unknown) does not exist
LINE 1: select * from crosstab('select extract (year from starts) as...

mynewdb=# CREATE EXTENSION IF NOT EXISTS tablefunc;
CREATE EXTENSION
mynewdb=# select * from crosstab('select extract (year from starts) as year, extract (month from starts) as month, count(*) from events group by year, month order by year, month','select * from month_count') AS (year int, jan int, feb int, mar int, apr int, may int, jun int, jul int, aug int, sep int, oct int, nov int, dec int) ORDER BY YEAR;
 year | jan | feb | mar | apr | may | jun | jul | aug | sep | oct | nov | dec
------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----
 2018 |     |   4 |     |   1 |     |     |     |     |     |     |     |   1
(1 row)